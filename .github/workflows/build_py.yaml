name: Build Python Executable

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for release"
        required: false
        default: test
  push:
    tags:
      - v+([0-9]).+([0-9]).+([0-9])?(-+([0-9A-Za-z-])*(.+([0-9A-Za-z-])))?(\++([0-9A-Za-z-])*(.+([0-9A-Za-z-])))

jobs:
  # Build for every OS
  github_build:
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact: pyserve-linux.tar.gz

          - os: macos-latest
            artifact: pyserve-macos.tar.gz

          - os: windows-latest
            artifact: pyserve-windows.zip
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3

      - name: Setup | Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Setup | Poetry
        uses: abatilo/actions-poetry@v2.0.0

      - name: Setup | Set Cache Target
        id: poetry_cfg
        run: |
          echo "::set-output name=poetry_cache::$(poetry config cache-dir)"
          echo "::set-output name=venv_cache::$(poetry config virtualenvs.path)"

      - name: Setup | Cache
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            ${{ steps.poetry_cfg.outputs.poetry_cache }}
            ${{ steps.poetry_cfg.outputs.venv_cache }}
          key: ${{ runner.os }}-poetry-${{ steps.poetry_cfg.outputs.poetry_cache }}-${{ steps.poetry_cfg.outputs.venv_cache }}-${{ hashFiles('**/poetry.lock') }}

      - name: Setup | Install Packages
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: nn
        run: poetry install

      - name: Build | Build
        working-directory: nn
        run: poetry run pyinstaller --onefile --name pyserve ./serve.py

      - name: Post Build | Prepare Artifacts [Windows]
        if: matrix.os == 'windows-latest'
        working-directory: nn/dist
        run: 7z a ../../${{ matrix.artifact }} pyserve.exe

      - name: Post Build | Prepare Artifacts [-nix]
        if: matrix.os != 'windows-latest'
        working-directory: nn/dist
        run: tar czvf ../../${{ matrix.artifact }} pyserve

      - name: Post Build | Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}

  # Create GitHub Release
  github_release:
    name: Create GitHub Release
    needs: github_build
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Set Release Tag [Dispatch]
        if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV

      - name: Setup | Fetch Artifacts
        uses: actions/download-artifact@v3

      - name: Setup | Checksums
        run: for file in pyserve-*/pyserve-*; do openssl dgst -sha256 -r "$file" | awk '{print $1}' > "${file}.sha256"; done

      - name: Build | Publish
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          generate_release_notes: false
          tag_name: ${{ env.TAG_NAME }}
          files: pyserve-*/pyserve-*
