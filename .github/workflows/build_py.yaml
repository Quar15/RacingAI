name: Build Python Executable

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for release"
        required: false
        default: test
  push:
    tags:
      - "v*"

defaults:
  run:
    working-directory: nn

jobs:
  # Build for every OS
  github_build:
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact: pyserve-linux.tar.gz

          - os: macos-latest
            artifact: pyserve-macos.tar.gz

          - os: windows-latest
            artifact: pyserve-windows.zip
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3

      - name: Setup | Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Setup | Poetry
        uses: abatilo/actions-poetry@v2.0.0

      - name: Setup | Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/poetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Setup | Install packages
        run: poetry install

      - name: Build | Build
        run: poetry run pyinstaller --onefile --name pyserve --distpath ../dist ./serve.py

      - name: Post Build | Prepare Artifacts [Windows]
        if: matrix.os == 'windows-latest'
        run: |
          cd ../dist
          7z a ../${{ matrix.artifact }} pyserve.exe
          cd -

      - name: Post Build | Prepare Artifacts [-nix]
        run: |
          cd ../dist
          tar czvf ../${{ matrix.artifact }} pyserve
          cd -

      - name: Post Build | Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.path }}

  # Create GitHub Release
  github_release:
    name: Create GitHub Release
    needs: github_build
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup | Set Release Tag [Dispatch]
        if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV

      - name: Setup | Fetch Artifacts
        uses: actions/download-artifact@v2

      - name: Setup | Checksums
        run: for file in pyserve-*; do openssl dgst -sha256 -r "$file" | awk '{print $1}' > "${file}.sha256"; done

      - name: Build | Publish
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          generate_release_notes: false
          tag_name: ${{ env.TAG_NAME }}
          files: pyserve-*
